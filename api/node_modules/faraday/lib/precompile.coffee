{helpers} = require('faraday')
mongodb = require('mongo')
assert = require('assert')
fs = require('fs')
exec = require('child_process').exec
_ = require('underscore')
watch = require('node-watch')


escapeShellSingleQuotes = (str) -> str.replace(/'/g, '\'"\'"\'')

templateSettings = 
    evaluate:
        head: '<%'
        tail: '%>'
    interpolate: 
        head: '<%='
        tail: '%>'
    escape: 
        head: '<%-'
        tail: '%>'

filenameRegex = /(^.+?\/views\/)(.+?)underscorecoffee$/

compileUnderscorecoffees = ->
    helpers.forEachVisibleFile('./views', ((filename, unmatched) ->
        helpers.logStamped("I precompile #{filename}")
        unless filename.match(filenameRegex)
            throw "precompile: I cannot parse filename #{filename}."
        newFilename = filename.replace(filenameRegex, ((_, toViews, afterViews) ->
            return toViews + '.compiled/' + afterViews + 'underscorejs'
        ))

        matched = ''
        helpers.logStamped("   I compile #{filename} to #{newFilename}.")
        helpers.nonBlockWhile(((next) ->
            for template in [templateSettings.interpolate, templateSettings.escape, templateSettings.evaluate] #I need to order them to try evaluate last, so it doesn't mismatch an escape or interpolate.
                regex = new RegExp('^((?:.|\n)+?' + template.head + ')((?:.|\n)+?)(' + template.tail + ')((?:.|\n)+)$')
                m = unmatched.match(regex)
                if m
                    #helpers.logStamped("precompile: exec(echo '#{escapeShellSingleQuotes(m[2])}' | coffee -sc)")
                    exec("echo '#{escapeShellSingleQuotes(m[2])}' | coffee -sc", 
                         ((err, stdout) ->
                            assert.ifError(err)
                            matched += m[1] + stdout + m[3]
                            unmatched = m[4]
                            next(true)))
                    return
            next(false)
        ),(() ->
            dirAcc = '.'
            helpers.nonBlockForEach(((next, dir) ->
                    dirAcc += '/' + dir
                    fs.exists(dirAcc, ((exists) ->
                        if exists
                            #helpers.logStamped("The dir #{dirAcc} already exists.")
                            next()
                        else
                            fs.mkdir(dirAcc, ((err) ->
                                assert.ifError(err)
                                #helpers.logStamped("I make the dir #{dirAcc}")
                                next()))))
                ), 
                newFilename.split('/')[1..-2],
                (() ->
                    fs.writeFile(newFilename, matched + unmatched, ((err) ->
                        assert.ifError(err)
                        helpers.logStamped("I have written to #{newFilename}.")
                        #helpers.logStamped(matched + unmatched)
                        ))))))))

compileAssets = (doWatch = false) ->
    helpers.logStamped("I will compile coffeescripts...")

    exec("coffee -#{if doWatch then 'w' else ''}co ./assets/javascripts ./assets/coffeescripts/", ((err, result) ->
        if err
            helpers.logStamped(err)
        else
            helpers.logStamped('...I have compiled all coffeescripts.')))

    helpers.logStamped("I will compile all sass files...")

    exec("sass #{if doWatch then '--watch' else '--update'} assets/styles/", ((err, stdout, stderr) ->
        if err
            helpers.logStamped(err)
        else
            helpers.logStamped('...I have compiled all sass files.')))

precompile = (doWatch = false) ->
    compileAssets(doWatch is true)
    helpers.logStamped("I will compile all html.underscorecoffee's...")
    unless doWatch is true
        compileUnderscorecoffees()
    else
        watch('./views', (filename) ->
            unless filename.match(/\.compiled/)?
                compileUnderscorecoffees())


if process.argv? and _.contains(process.argv, '--watch')
    precompile(true)
else if module.parent?
    module.exports = precompile
else 
    precompile()

